"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Toast = exports.Confirm = exports.Prompt = exports.ConfirmAuto = exports.Notification = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

require("./dialog.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notification = exports.Notification = function (_Component) {
	_inherits(Notification, _Component);

	function Notification() {
		_classCallCheck(this, Notification);

		var _this = _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this));

		_this.state = {
			count: _this.count
		};
		return _this;
	}

	_createClass(Notification, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			var _circle = this.refs.circle;

			if (_circle.getContext) {
				var ctx = _circle.getContext("2d");
				ctx.beginPath();
				ctx.strokeStyle = "white";
				var circle = {
					x: 15, //圆心的x轴坐标值
					y: 15, //圆心的y轴坐标值
					r: 14 //圆的半径
				};
				ctx.arc(circle.x, circle.y, circle.r, 0, Math.PI * 2, false);
				ctx.stroke();

				ctx.beginPath();
				ctx.moveTo(9, 9);
				ctx.lineTo(21, 21);
				ctx.stroke();

				ctx.beginPath();
				ctx.moveTo(21, 9);
				ctx.lineTo(9, 21);
				ctx.stroke();

				ctx.beginPath();
				ctx.moveTo(15, 30);
				ctx.lineTo(15, 50);
				ctx.stroke();
			}
		}
	}, {
		key: "render",
		value: function render() {
			return _react2.default.createElement(
				"div",
				{ className: this.props.show ? "notification-container" : "notification-hidden" },
				_react2.default.createElement(
					"div",
					{ className: "notification-box" },
					_react2.default.createElement("canvas", { ref: "circle", className: "notification-tail", width: "30px", height: "50px" }),
					_react2.default.createElement(
						"div",
						{ className: "notification-title" },
						"\u901A\u77E5"
					),
					_react2.default.createElement(
						"div",
						{ className: "notification-content" },
						this.props.content
					),
					_react2.default.createElement(
						"div",
						{ className: "notification-buttons" },
						_react2.default.createElement("input", { className: "notification-close", type: "button", defaultValue: "\u5173\u95ED", onClick: this.props.close }),
						_react2.default.createElement("input", { className: "notification-util", type: "button", value: this.props.funName, onClick: this.props.fun })
					)
				)
			);
		}
	}]);

	return Notification;
}(_react.Component);

Notification.propTypes = {
	content: _propTypes2.default.string.isRequired, //显示内容
	show: _propTypes2.default.bool.isRequired, //控制显示
	close: _propTypes2.default.func.isRequired, //控制关闭
	fun: _propTypes2.default.func.isRequired, //功能按钮事件
	funName: _propTypes2.default.string.isRequired //功能按钮显示文字
};

var ConfirmAuto = exports.ConfirmAuto = function (_Component2) {
	_inherits(ConfirmAuto, _Component2);

	function ConfirmAuto() {
		_classCallCheck(this, ConfirmAuto);

		var _this2 = _possibleConstructorReturn(this, (ConfirmAuto.__proto__ || Object.getPrototypeOf(ConfirmAuto)).call(this));

		_this2.count = 3;
		_this2.state = {
			count: _this2.count
		};
		return _this2;
	}

	_createClass(ConfirmAuto, [{
		key: "componentWillReceiveProps",
		value: function componentWillReceiveProps(props) {
			if (props.show) {
				this.countdown();
			}
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			if (this.props.show) this.countdown();
		}
	}, {
		key: "countdown",
		value: function countdown() {
			var _this3 = this;

			clearInterval(this.timer);
			this.timer = setInterval(function () {
				var _count = --_this3.state.count;
				if (_count < 1) {
					clearInterval(_this3.timer);
					_this3.props.close();
				}
				_this3.setState({
					count: _count < 1 ? _this3.count : _count
				});
			}, 1000);
		}
	}, {
		key: "render",
		value: function render() {
			return _react2.default.createElement(
				"div",
				{ className: this.props.show ? "confirmAuto-container" : "confirmAuto-hidden" },
				_react2.default.createElement(
					"div",
					{ className: "confirmAuto-box" },
					_react2.default.createElement(
						"div",
						{ className: "confirmAuto-content" },
						this.props.content || "请携带 content 参数"
					),
					_react2.default.createElement(
						"div",
						{ className: "confirmAuto-count", onClick: this.props.close },
						this.state.count
					)
				)
			);
		}
	}]);

	return ConfirmAuto;
}(_react.Component);

ConfirmAuto.propTypes = {
	content: _propTypes2.default.string.isRequired, //显示内容
	show: _propTypes2.default.bool.isRequired, //控制显示
	close: _propTypes2.default.func.isRequired //控制关闭
};

var Prompt = exports.Prompt = function (_Component3) {
	_inherits(Prompt, _Component3);

	function Prompt() {
		_classCallCheck(this, Prompt);

		return _possibleConstructorReturn(this, (Prompt.__proto__ || Object.getPrototypeOf(Prompt)).apply(this, arguments));
	}

	_createClass(Prompt, [{
		key: "render",
		value: function render() {
			return _react2.default.createElement(
				"div",
				{ className: this.props.show ? "prompt-container" : "prompt-hidden" },
				_react2.default.createElement(
					"div",
					{ className: "prompt-box" },
					_react2.default.createElement(
						"div",
						{ className: "prompt-content" },
						this.props.content || "请携带 content 参数"
					),
					_react2.default.createElement(
						"div",
						{ className: "prompt-buttons" },
						_react2.default.createElement(
							"div",
							{ className: "prompt-confirm", onClick: this.props.close },
							this.props.other || "其他"
						),
						_react2.default.createElement(
							"div",
							{ className: "prompt-fun", onClick: this.props.fun },
							this.props.confirm || "确定"
						)
					)
				)
			);
		}
	}]);

	return Prompt;
}(_react.Component);

Prompt.propTypes = {
	content: _propTypes2.default.string.isRequired, //显示内容
	show: _propTypes2.default.bool.isRequired, //控制显示
	close: _propTypes2.default.func.isRequired, //控制关闭
	confirm: _propTypes2.default.string.isRequired, //确定按钮内容
	other: _propTypes2.default.string.isRequired, //功能按钮内容
	fun: _propTypes2.default.func.isRequired //功能按钮方法
};

var Confirm = exports.Confirm = function (_Component4) {
	_inherits(Confirm, _Component4);

	function Confirm() {
		_classCallCheck(this, Confirm);

		return _possibleConstructorReturn(this, (Confirm.__proto__ || Object.getPrototypeOf(Confirm)).apply(this, arguments));
	}

	_createClass(Confirm, [{
		key: "render",
		value: function render() {
			return _react2.default.createElement(
				"div",
				{ className: this.props.show ? "confirm-container" : "confirm-hidden" },
				_react2.default.createElement(
					"div",
					{ className: "confirm-box" },
					_react2.default.createElement(
						"div",
						{ className: "confirm-content" },
						this.props.content || "请携带 content 参数"
					),
					_react2.default.createElement(
						"div",
						{ className: "confirm-confirm", onClick: this.props.close },
						this.props.confirm || "确定"
					)
				)
			);
		}
	}]);

	return Confirm;
}(_react.Component);

Confirm.propTypes = {
	content: _propTypes2.default.string.isRequired, //显示内容
	show: _propTypes2.default.bool.isRequired, //控制显示
	close: _propTypes2.default.func.isRequired, //控制关闭
	confirm: _propTypes2.default.string.isRequired //确定按钮内容
};

var Toast = exports.Toast = function (_Component5) {
	_inherits(Toast, _Component5);

	function Toast(props) {
		_classCallCheck(this, Toast);

		var _this6 = _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).call(this, props));

		_this6.state = {
			show: props.show
		};
		return _this6;
	}

	_createClass(Toast, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			var _this7 = this;

			if (this.props.show) setTimeout(function () {
				_this7.props.close();
				_this7.isShow = false;
			}, this.props.long * 1000);
		}
	}, {
		key: "componentWillReceiveProps",
		value: function componentWillReceiveProps(nextProps) {
			if (nextProps.show) {
				this.setState({
					show: true
				}, function () {
					setTimeout(function () {
						nextProps.close();
					}, nextProps.long * 1000);
				});
			}
		}
	}, {
		key: "render",
		value: function render() {
			return _react2.default.createElement(
				"div",
				{ className: this.props.show ? "toast-container" : "toast-hidden" },
				this.props.content
			);
		}
	}]);

	return Toast;
}(_react.Component);

Toast.propTypes = {
	content: _propTypes2.default.string.isRequired, //显示内容
	show: _propTypes2.default.bool.isRequired, //控制显示
	long: _propTypes2.default.number.isRequired, //显示时长
	close: _propTypes2.default.func.isRequired //关闭事件
};
