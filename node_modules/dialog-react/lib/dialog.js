import React, {Component} from "react"
import PropTypes from "prop-types"
import "./dialog.css"

export class Notification extends Component {
	constructor() {
		super()
		this.state = {
			count: this.count
		}
	}

	componentDidMount() {
		let _circle = this.refs.circle

		if(_circle.getContext){
			let ctx = _circle.getContext("2d")
			ctx.beginPath()
		    ctx.strokeStyle = "white"
		    let circle = {
		        x : 15,    //圆心的x轴坐标值
		        y : 15,    //圆心的y轴坐标值
		        r : 14      //圆的半径
		    }
		    ctx.arc(circle.x, circle.y, circle.r, 0, Math.PI * 2, false)
		    ctx.stroke()

		    ctx.beginPath()
		    ctx.moveTo(9, 9)
		    ctx.lineTo(21, 21)
		    ctx.stroke()

		    ctx.beginPath()
		    ctx.moveTo(21, 9)
		    ctx.lineTo(9, 21)
		    ctx.stroke()

		    ctx.beginPath()
		    ctx.moveTo(15, 30)
		    ctx.lineTo(15, 50)
		    ctx.stroke()
		}
	}

	render() {
		return (
			<div className={this.props.show ? "notification-container" : "notification-hidden"}>
				<div className="notification-box">
					<canvas ref="circle" className="notification-tail" width="30px" height="50px"></canvas>
					<div className="notification-title">
						通知
					</div>
					<div className="notification-content">
						{this.props.content}
					</div>
					<div className="notification-buttons">
						<input className="notification-close" type="button" defaultValue="关闭" onClick={this.props.close} />
						<input className="notification-util" type="button" value={this.props.funName} onClick={this.props.fun} />
					</div>
				</div>
			</div>
		)
	}
}

Notification.propTypes = {
	content: PropTypes.string.isRequired, //显示内容
	show: PropTypes.bool.isRequired, //控制显示
	close: PropTypes.func.isRequired, //控制关闭
	fun: PropTypes.func.isRequired, //功能按钮事件
	funName: PropTypes.string.isRequired //功能按钮显示文字
}

export class ConfirmAuto extends Component {
	constructor() {
		super()
		this.count = 3
		this.state = {
			count: this.count
		}
	}

	componentWillReceiveProps(props) {
		if(props.show) {
			this.countdown()
		}
	}

	componentDidMount() {
		if(this.props.show) this.countdown()
	}

	countdown() {
		clearInterval(this.timer)
		this.timer = setInterval(() => {
			let _count = --this.state.count
			if(_count < 1) {
				clearInterval(this.timer)
				this.props.close()
			}
			this.setState({
				count: _count < 1 ? this.count : _count
			})
		}, 1000)
	}

	render() {
		return (
			<div className={this.props.show ? "confirmAuto-container" : "confirmAuto-hidden"}>
				<div className="confirmAuto-box">
					<div className="confirmAuto-content">
						{this.props.content || "请携带 content 参数"}
					</div>
					<div className="confirmAuto-count" onClick={this.props.close}>
						{this.state.count}
					</div>
				</div>
			</div>
		)
	}
}

ConfirmAuto.propTypes = {
	content: PropTypes.string.isRequired, //显示内容
	show: PropTypes.bool.isRequired, //控制显示
	close: PropTypes.func.isRequired //控制关闭
}

export class Prompt extends Component {
	render() {
		return (
			<div className={this.props.show ? "prompt-container" : "prompt-hidden"}>
				<div className="prompt-box">
					<div className="prompt-content">
						{this.props.content || "请携带 content 参数"}
					</div>
					<div className="prompt-buttons">
						<div className="prompt-confirm" onClick={this.props.close}>
							{this.props.other || "其他"}
						</div>
						<div className="prompt-fun" onClick={this.props.fun}>
							{this.props.confirm || "确定"}
						</div>
					</div>
				</div>
			</div>
		)
	}
}

Prompt.propTypes = {
	content: PropTypes.string.isRequired, //显示内容
	show: PropTypes.bool.isRequired, //控制显示
	close: PropTypes.func.isRequired, //控制关闭
	confirm: PropTypes.string.isRequired, //确定按钮内容
	other: PropTypes.string.isRequired, //功能按钮内容
	fun: PropTypes.func.isRequired //功能按钮方法
}

export class Confirm extends Component {
	render() {
		return (
			<div className={this.props.show ? "confirm-container" : "confirm-hidden"}>
				<div className="confirm-box">
					<div className="confirm-content">
						{this.props.content || "请携带 content 参数"}
					</div>
					<div className="confirm-confirm" onClick={this.props.close}>
						{this.props.confirm || "确定"}
					</div>
				</div>
			</div>
		)
	}
}

Confirm.propTypes = {
	content: PropTypes.string.isRequired, //显示内容
	show: PropTypes.bool.isRequired, //控制显示
	close: PropTypes.func.isRequired, //控制关闭
	confirm: PropTypes.string.isRequired //确定按钮内容
}

export class Toast extends Component {
	constructor(props) {
		super(props)
		this.state = {
			show: props.show
		}
	}

	componentDidMount() {
		if(this.props.show) setTimeout(
			() => {
			this.props.close()
			this.isShow = false
		}, this.props.long * 1000)
	}

	componentWillReceiveProps(nextProps) {
		if(nextProps.show) {
			this.setState({
				show: true
			}, () => {
				setTimeout(() => {
					nextProps.close()
				}, nextProps.long * 1000)
			})
		}
	}

	render() {
		return (
			<div className={this.props.show ? "toast-container" : "toast-hidden"}>
				{this.props.content}
			</div>
		)
	}
}

Toast.propTypes = {
	content: PropTypes.string.isRequired, //显示内容
	show: PropTypes.bool.isRequired, //控制显示
	long: PropTypes.number.isRequired, //显示时长
	close: PropTypes.func.isRequired //关闭事件
}
